// <auto-generated />
using System;
using ERP.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.Infrastructure.Migrations
{
    [DbContext(typeof(ErpDbContext))]
    [Migration("20250622134153_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ERP.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("ClientSize")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("client_size");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_person");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_phone");

                    b.Property<decimal?>("ContractValue")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("contract_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("industry");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName")
                        .HasDatabaseName("idx_clients_company_name");

                    b.HasIndex("Industry")
                        .HasDatabaseName("idx_clients_industry");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_clients_tenant");

                    b.HasIndex("TenantId", "CompanyName")
                        .HasDatabaseName("idx_clients_tenant_company");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("hire_date");

                    b.Property<int>("LeaveBalance")
                        .HasColumnType("int")
                        .HasColumnName("leave_balance");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("position");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("salary");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_employees_email");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("idx_employees_manager");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_employees_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_employees_tenant");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("uk_employees_tenant_email");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("skill_id");

                    b.Property<string>("Certification")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("certification");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_used_date");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("skill_level");

                    b.Property<string>("Technology")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("technology");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("int")
                        .HasColumnName("years_experience");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("idx_employee_skills_employee");

                    b.HasIndex("EmployeeId", "Technology")
                        .HasDatabaseName("idx_employee_skills_employee_tech");

                    b.HasIndex("Technology", "Level")
                        .HasDatabaseName("idx_employee_skills_tech_level");

                    b.ToTable("employee_skills", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("project_id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("project_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("ProfitMargin")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("profit_margin");

                    b.Property<int>("RiskLevel")
                        .HasColumnType("int")
                        .HasColumnName("risk_level");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("technologies");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("project_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("idx_projects_client");

                    b.HasIndex("Code")
                        .HasDatabaseName("idx_projects_code");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("idx_projects_manager");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_projects_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_projects_tenant");

                    b.HasIndex("TenantId", "Code")
                        .IsUnique()
                        .HasDatabaseName("uk_projects_tenant_code");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProjectAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("assignment_id");

                    b.Property<int>("AllocationPercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100)
                        .HasColumnName("allocation_percentage");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("hourly_rate");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("project_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("idx_project_assignments_employee");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("idx_project_assignments_project");

                    b.HasIndex("ProjectId", "EmployeeId")
                        .HasDatabaseName("idx_project_assignments_project_employee");

                    b.ToTable("project_assignments", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProjectMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("milestone_id");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Deliverables")
                        .HasColumnType("longtext")
                        .HasColumnName("deliverables");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("due_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("PaymentPercentage")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("payment_percentage");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("project_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("idx_project_milestones_project");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_project_milestones_status");

                    b.HasIndex("ProjectId", "DueDate")
                        .HasDatabaseName("idx_project_milestones_project_due");

                    b.ToTable("project_milestones", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.TimeEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("entry_id");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("approved");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("approved_by");

                    b.Property<bool>("Billable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("billable");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("hours");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("project_id");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("task_description");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy")
                        .HasDatabaseName("idx_time_entries_approved_by");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_time_entries_tenant");

                    b.HasIndex("Billable", "Approved")
                        .HasDatabaseName("idx_time_entries_billable_approved");

                    b.HasIndex("EmployeeId", "Date")
                        .HasDatabaseName("idx_time_entries_employee_date");

                    b.HasIndex("ProjectId", "Date")
                        .HasDatabaseName("idx_time_entries_project_date");

                    b.ToTable("time_entries", (string)null);
                });

            modelBuilder.Entity("ERP.Domain.Entities.Employee", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Employee", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ERP.Domain.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Employee", null)
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Domain.Entities.Project", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ERP.Domain.ValueObjects.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("end_date");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("start_date");

                            b1.HasKey("ProjectId");

                            b1.ToTable("projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.OwnsOne("ERP.Domain.ValueObjects.Money", "Budget", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(15,2)")
                                .HasColumnName("budget");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("varchar(3)")
                                .HasColumnName("currency");

                            b1.HasKey("ProjectId");

                            b1.ToTable("projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("Budget")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Manager");

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProjectAssignment", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Employee", "Employee")
                        .WithMany("Assignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ERP.Domain.ValueObjects.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("ProjectAssignmentId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("end_date");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("start_date");

                            b1.HasKey("ProjectAssignmentId");

                            b1.ToTable("project_assignments");

                            b1.WithOwner()
                                .HasForeignKey("ProjectAssignmentId");
                        });

                    b.Navigation("Employee");

                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Domain.Entities.ProjectMilestone", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Domain.Entities.TimeEntry", b =>
                {
                    b.HasOne("ERP.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ERP.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Skills");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("ERP.Domain.Entities.Project", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Milestones");
                });
#pragma warning restore 612, 618
        }
    }
}
